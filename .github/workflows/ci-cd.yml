name: Finsera API CI/CD

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "staging" ]
  pull_request:
    branches: [ "staging" ]


env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: docker.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: fahrizalvianaz/finsera-api-staging:v1

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Build with Maven
        run: mvn clean package

      - name: Build Docker image
        run: docker build -t fahrizalvianaz/finsera-api-staging:v1 .

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Push Docker image to DockerHub
        run: docker push fahrizalvianaz/finsera-api-staging:v1
        
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install sshpass
        run: sudo apt-get install -y sshpass
      
      - name: Set up SSH key
        run: |
          echo "$SSH_PRIVATE_KEY" > /tmp/id_rsa
          chmod 600 /tmp/id_rsa
          mkdir -p ~/.ssh
          ssh-keyscan -H 103.235.74.240 >> ~/.ssh/known_hosts
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Server
        run: |
          sshpass -p "$SSH_PASSPHRASE" ssh -o StrictHostKeyChecking=no -i /tmp/id_rsa root@103.235.74.240 << 'EOF'
            docker pull fahrizalvianaz/finsera-api-staging:v1
            docker stop finsera-api || true
            docker rm finsera-api || true
            docker run -d --name finsera-api -p 8080:8080 fahrizalvianaz/finsera-api-staging:v1
            sudo systemctl restart nginx
          EOF
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_PASSPHRASE: ${{ secrets.SSH_PASSPHRASE }}
        shell: bash
